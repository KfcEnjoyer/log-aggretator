
services:
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=users
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - app-network
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:29092 --list || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
  kafka-setup:
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - kafka
    command: >
      bash -c "
        echo Waiting for Kafka to be ready...;
        cub kafka-ready -b kafka:29092 1 30;
        kafka-topics --create --if-not-exists --topic auth-logs --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1;
        echo Topics created
      "
    networks:
      - app-network
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8080:8080"
    environment:
      - CONFIG_PATH=/log-aggregator/configs/config.yaml
      - KAFKA_BROKERS=kafka:29092
    volumes:
      - ./configs:/log-aggregator/configs
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network
    command: ["./auth-service"]

  log-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: log-service
    environment:
      - CONFIG_PATH=/log-aggregator/configs/config.yaml
      - KAFKA_BROKERS=kafka:29092
    volumes:
      - ./configs:/log-aggregator/configs
    depends_on:
      - auth-service
    networks:
      - app-network
    command: ["./log-service"]

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data: